{"name":"Neuralnet","tagline":"Native neural network Node.js module.","body":"Neural network native module for Node.js\r\n==========\r\n\r\nThis library was created as self learning project to get into creating Node.js native modules and neural networks.\r\n\r\nThe Node.js version used is 5.3.0.\r\n\r\nRunning the source\r\n---------------\r\n\r\nFirst run the install npm command to download and install all dependencies\r\n\r\n```\r\nnpm install\r\n```\r\n\r\nThen you need node-gyp to create and compile C++ sources\r\n\r\n```\r\nnpm install -g node-gyp\r\n```\r\n\r\nThen use the configure command to create appropriate project build files for your platform\r\n\r\n```\r\nnode-gyp configure\r\n```\r\n\r\nAfter that you're ready to build. You can do that by using the node-gyp build command.\r\n\r\n```\r\nnode-gyp build\r\n```\r\n\r\nAfter the build succeeds run the test command to verify that everything is OK.\r\n\r\n```\r\ngulp test\r\n```\r\n\r\nYou can run embedded examples which are located in the examples folder\r\n\r\n```\r\nnpm run example-xor\r\n```\r\n\r\n```\r\nnpm run example-sinus\r\n```\r\n\r\nInstallation\r\n---------------\r\n\r\n```\r\nnpm install mkmarek.neuralnet\r\n```\r\n\r\nUsage\r\n---------------\r\n\r\nImport the the module\r\n\r\n```javascript\r\nvar neuralnet = require('mkmarek.neuralnet');\r\n```\r\n\r\nor with ES6 modules syntax\r\n\r\n```javascript\r\nimport neuralnet from 'mkmarek.neuralnet'\r\n```\r\n\r\nThe neuralnet module exposes several functions you can use.\r\n\r\nFor creating a neural network use:\r\n\r\n```javascript\r\nlet handle = neuralnet.create([2,4,1]);\r\n```\r\n\r\nWhere the first parameter is the topology of the network. It's an array of numbers. Each member of that array represents\r\none layer and each value in that array represents amount of neurons in that layer. The first number then represents how\r\nmany neurons are in input layer and the last number represents how many neurons are in the output layer. Anything\r\nin between are hidden layers.\r\n\r\nThe handle that is returned is a number used for referencing the created network.\r\n\r\nFor setting up input values use:\r\n\r\n```javascript\r\nneuralnet.setInputValues(handle, [1,0]);\r\n```\r\n\r\nWhere the first parameter is a handle number of a given neural network and the second parameter is an array with\r\nnumbers that shall go into the input layer.\r\n\r\nFor getting the output values use:\r\n\r\n```javascript\r\nlet values = neuralnet.getOutputValues(handle);\r\n```\r\n\r\nWhere the first and only parameter is the network handle. The returned object is an array of numbers representing\r\nthe values in the output layer after a feed forward mechanism is invoked for all defined layers.\r\n\r\nFor invoking back propagation use:\r\n\r\n```javascript\r\nneuralnet.backPropagate(handle, [1]);\r\n```\r\n\r\nThe first parameter is as usual the network handle and the second one is the desired output that we expect from our\r\nneural network. Use the back propagation in combination with getOutputValues function to refresh the data each time\r\nbefore the back propagation is called.\r\n\r\nAfter you're done with you network call the clear function to cleanup all resources that your neural network allocated.\r\n\r\n```javascript\r\nneuralnet.clear(handle);\r\n```\r\n\r\nThe one and only parameter is the neural network handle.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}